unknown: -1 :: java.util.Arrays$ArrayList: forEach(Ljava/util/function/Consumer;) ===> testingretrolambda.Main$$Lambda$1: accept(Ljava/lang/Object;)
unknown: -1 :: java.util.Arrays$ArrayList: forEach(Ljava/util/function/Consumer;) ===> testingretrolambda.Main$$Lambda$2: accept(Ljava/lang/Object;)

unknown: -1 :: java.util.stream.ReferencePipeline$2$1: accept(Ljava/lang/Object;) ===> testingretrolambda.Main$$Lambda$3: test(Ljava/lang/Object;)

unknown: -1 :: testingretrolambda.Main$$Lambda$1: <init>(Ljava/io/PrintStream;) ===> java.lang.Object: <init>()
unknown: -1 :: testingretrolambda.Main$$Lambda$1: accept(Ljava/lang/Object;) ===> java.io.PrintStream: println(Ljava/lang/Object;)
unknown: -1 :: testingretrolambda.Main$$Lambda$1: lambdaFactory$(Ljava/io/PrintStream;) ===> testingretrolambda.Main$$Lambda$1: <init>(Ljava/io/PrintStream;)

unknown: -1 :: testingretrolambda.Main$$Lambda$2: <init>(I) ===> java.lang.Object: <init>()
unknown: -1 :: testingretrolambda.Main$$Lambda$2: accept(Ljava/lang/Object;) ===> testingretrolambda.Main: access$lambda$0(ILjava/lang/Integer;)
unknown: -1 :: testingretrolambda.Main$$Lambda$2: lambdaFactory$(I) ===> testingretrolambda.Main$$Lambda$2: <init>(I)

unknown: -1 :: testingretrolambda.Main$$Lambda$3: <clinit>() ===> testingretrolambda.Main$$Lambda$3: <init>()
unknown: -1 :: testingretrolambda.Main$$Lambda$3: <init>() ===> java.lang.Object: <init>()
unknown: -1 :: testingretrolambda.Main$$Lambda$3: test(Ljava/lang/Object;) ===> testingretrolambda.Main: access$lambda$1(Ljava/lang/Integer;)

unknown: -1 :: testingretrolambda.Main: access$lambda$0(ILjava/lang/Integer;) ===> testingretrolambda.Main: lambda$0(ILjava/lang/Integer;)
unknown: -1 :: testingretrolambda.Main: access$lambda$1(Ljava/lang/Integer;) ===> testingretrolambda.Main: lambda$1(Ljava/lang/Integer;)

unknown: -1 :: testingretrolambda.Main: lambda$0(ILjava/lang/Integer;) ===> java.io.PrintStream: println(I)
unknown: -1 :: testingretrolambda.Main: lambda$0(ILjava/lang/Integer;) ===> java.lang.Integer: intValue()
unknown: -1 :: testingretrolambda.Main: lambda$1(Ljava/lang/Integer;) ===> java.lang.Integer: intValue()

unknown: -1 :: testingretrolambda.Main: main([Ljava/lang/String;) ===> java.io.PrintStream: println(Ljava/lang/Object;)
unknown: -1 :: testingretrolambda.Main: main([Ljava/lang/String;) ===> java.lang.Integer: valueOf(I)
unknown: -1 :: testingretrolambda.Main: main([Ljava/lang/String;) ===> java.util.Arrays$ArrayList: forEach(Ljava/util/function/Consumer;)
unknown: -1 :: testingretrolambda.Main: main([Ljava/lang/String;) ===> java.util.Arrays: asList([Ljava/lang/Object;)
unknown: -1 :: testingretrolambda.Main: main([Ljava/lang/String;) ===> java.util.Collection: stream()
unknown: -1 :: testingretrolambda.Main: main([Ljava/lang/String;) ===> java.util.stream.Collectors: toList()
unknown: -1 :: testingretrolambda.Main: main([Ljava/lang/String;) ===> java.util.stream.ReferencePipeline: collect(Ljava/util/stream/Collector;)
unknown: -1 :: testingretrolambda.Main: main([Ljava/lang/String;) ===> java.util.stream.ReferencePipeline: filter(Ljava/util/function/Predicate;)
unknown: -1 :: testingretrolambda.Main: main([Ljava/lang/String;) ===> testingretrolambda.Main$$Lambda$1: lambdaFactory$(Ljava/io/PrintStream;)
unknown: -1 :: testingretrolambda.Main: main([Ljava/lang/String;) ===> testingretrolambda.Main$$Lambda$2: lambdaFactory$(I)
unknown: -1 :: testingretrolambda.Main: main([Ljava/lang/String;) ===> testingretrolambda.Main$$Lambda$3: lambdaFactory$()
